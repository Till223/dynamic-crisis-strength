namespace = dcs

country_event = {
    id = dcs.1
    hide_window = yes
    fire_only_once = yes
    trigger = { not = { has_global_flag = dcs_mod_initialized }}
    immediate = {
        every_country = {
            country_event = { id = dcs.100}
        }
        every_country = {
            country_event = { id = dcs.101}
        }
        set_global_flag = dcs_mod_initialized
    }
}

#recalculate crisis modifier, initialize dcs_variable_holder if necessary and notify player empires
country_event = {
    id = dcs.100
    hide_window = yes
	is_triggered_only = yes
    trigger = {
        OR = {
            is_country_type = ai_empire           			# Contingency
            is_country_type = swarm           				# Prethoryn Scourge
            is_country_type = extradimensional              # Unbidden
            is_country_type = feral_prethoryn_infighting    # Prethoryn Scourge
			is_country_type = feral_prethoryn               # Prethoryn Scourge
            is_country_type = extradimensional_2            # Unbidden: Abberant
            is_country_type = extradimensional_3            # Unbidden: Vehement
        }
    }

    immediate = {
        if = {
            limit = {
                OR = {         
                    is_country_type = ai_empire           			# Contingency
                    is_country_type = swarm           				# Prethoryn Scourge
                    is_country_type = extradimensional              # Unbidden 
                }
            }
            #calculate vanilla crisis strength through modifier extraction
            if = {
                limit = {
                    not = { is_variable_set = dcs_detected_vanilla_crisis }
                }
                #determine current modifier strength
                export_modifier_to_variable = {
                    variable = dcs_damage_readout
                    modifier = ship_weapon_damage
                }
                export_modifier_to_variable = {
                    variable = dcs_hull_readout
                    modifier = ship_hull_mult
                }
                export_modifier_to_variable = {
                    variable = dcs_armor_readout
                    modifier = ship_armor_mult
                }
                export_modifier_to_variable = {
                    variable = dcs_shield_readout
                    modifier = ship_shield_mult
                }
                log = "Current Ship Weapon Damage Modifier: [this.dcs_damage_readout]"
                log = "Current Ship Hull Modifier: [this.dcs_hull_readout]"
                log = "Current Ship Armor Modifier: [this.dcs_armor_readout]"
                log = "Current Ship Shield Modifier: [this.dcs_shield_readout]"
                #set lowest value as negation strength. Some values might have buffs from other sources, hopefully not all.
                set_variable = { which = dcs_detected_vanilla_crisis value = dcs_damage_readout} 
                if = {
                    limit = { check_variable = { which = dcs_hull_readout value < dcs_detected_vanilla_crisis } }
                    set_variable = { which = dcs_detected_vanilla_crisis value = dcs_hull_readout } 
                }
                if = {
                    limit = { check_variable = { which = dcs_armor_readout value < dcs_detected_vanilla_crisis } }
                    set_variable = { which = dcs_detected_vanilla_crisis value = dcs_armor_readout } 
                }
                if = {
                    limit = { check_variable = { which = dcs_shield_readout value < dcs_detected_vanilla_crisis } }
                    set_variable = { which = dcs_detected_vanilla_crisis value = dcs_shield_readout } 
                }
                log = "Set Negation Strength to: [this.dcs_detected_vanilla_crisis]"
                clear_variable = dcs_damage_readout
                clear_variable = dcs_hull_readout
                clear_variable = dcs_armor_readout
                clear_variable = dcs_shield_readout
                #log current modifier strength
            }
            event_target:global_event_country = {
                #calculate galaxy strength and proportional dynamic crisis strength
                dcs_calculate_crisis_strength = yes
                #save vanilla crisis strength readout to global. This global value is used by subcrisis like Aberrant and Vehement
                set_variable = { which = dcs_detected_vanilla_crisis value = prev.dcs_detected_vanilla_crisis }
                
                every_country = {
                    limit = { is_ai = no }
                    country_event = {
                        id = dcs.300
                        days = 1
                    }
                }
            }
            save_global_event_target_as = last_crisis_empire
        }
    }
}

#apply crisis modifier
country_event = {
    id = dcs.101
    hide_window = yes
	is_triggered_only = yes
    trigger = {
        OR = {
            is_country_type = ai_empire           			# Contingency
            is_country_type = swarm           				# Prethoryn Scourge
            is_country_type = extradimensional              # Unbidden
            is_country_type = feral_prethoryn_infighting    # Prethoryn Scourge
			is_country_type = feral_prethoryn               # Prethoryn Scourge
            is_country_type = extradimensional_2            # Unbidden: Abberant
            is_country_type = extradimensional_3            # Unbidden: Vehement
        }
    }

    immediate = {
        #remove old modifier if it exists
        if = {
            limit = { has_modifier = dcs_crisis_strength_boost }
            remove_modifier = dcs_crisis_strength_boost
        }
        #get vanilla crisis strength negation from global if this is the first run
        if = {
            limit = { not = { is_variable_set = dcs_detected_vanilla_crisis } }
            set_variable = { which = dcs_detected_vanilla_crisis value = event_target:global_event_country.dcs_detected_vanilla_crisis }
        }
        #prepare vanilla crisis strength negation or set to 0 if negation disabled
        if = {
            limit = { event_target:global_event_country = { not = { has_country_flag = dcs_not_negate_crisis_strength } } }
            set_variable = { which = dcs_subtract_vanilla_crisis value = dcs_detected_vanilla_crisis }
        } else = {
            set_variable = { which = dcs_subtract_vanilla_crisis value = 0 }
        }

        event_target:global_event_country = {
            if = {
                #prepare difficulty multiplier in case it was not set for some reason
                limit = { not = { is_variable_set = dcs_calculation_multiplier } }
                set_variable = { which = dcs_calculation_multiplier value = 1 }
            }
            if = {
                #prepare static offset in case it was not set for some reason
                limit = { not = { is_variable_set = dcs_static_offset } }
                set_variable = { which = dcs_static_offset value = 0 }
            }
            if = {
                #Custom modifier
                limit = { has_country_flag = dcs_custom_crisis_multiplier_flag }
                set_variable = { which = dcs_applied_multiplier value = dcs_custom_crisis_multiplier }
                #subtract determined vanilla crisis strength
                subtract_variable = { which = dcs_applied_multiplier value = prev.dcs_subtract_vanilla_crisis }
                log = "Application of Custom Crisis Strength"
            } else = {
                if = {
                    #First application of calculated modifier
                    limit = { prev = { not = { is_variable_set = dcs_last_crisis_multiplier } } }
                    prev = { set_variable = { which = dcs_last_crisis_multiplier value = prev.dcs_crisis_multiplier } }
                    log = "First Application of Calculated Crisis Strength"
                }
                set_variable = { which = dcs_applied_multiplier value = prev.dcs_last_crisis_multiplier }
                multiply_variable = { which = dcs_applied_multiplier value = dcs_calculation_multiplier }
                #subtract determined vanilla crisis strength
                subtract_variable = { which = dcs_applied_multiplier value = prev.dcs_subtract_vanilla_crisis }
                # add static offset
                change_variable = { which = dcs_applied_multiplier value = dcs_static_offset }
                #ensure that applied multiplier is not negative. If the vanilla crisis setting is higher than the calculated,
                # we end up with the vanilla crisis strength.
                if = {
                    limit = { check_variable = { which = dcs_applied_multiplier value < 0 } }
                    set_variable = { which = dcs_applied_multiplier value = 0 }
                }
                log = "Application of Calculated Crisis Strength"
            }

            #apply new modifier
            prev = { add_modifier = { modifier = dcs_crisis_strength_boost days = -1 mult = prev.dcs_applied_multiplier } }
            #set equivalent vanilla crisis strength for printing in event dialog
            set_variable = { which = dcs_equivalent_vanilla_crisis value = dcs_applied_multiplier }
            change_variable = { which = dcs_equivalent_vanilla_crisis value = prev.dcs_detected_vanilla_crisis }
            log = "Applied Crisis Strength Multiplier: [this.dcs_applied_multiplier]"
        }
    }
}

country_event = {
    id = dcs.300
    title = dcs_report.title
	is_triggered_only = yes
    trigger = {
        is_ai = no
    }
	desc = dcs_report.desc
    picture = GFX_evt_fleet_evil

    option = {
        name = dcs_report.ok
    }
}

country_event = {
    id = dcs.400
    title = dcs_menu.title
	is_triggered_only = yes
    trigger = {
        is_ai = no
    }
	desc =  {
        text = dcs_menu.desc
        trigger = { 
            event_target:global_event_country = { 
                NOT = { has_country_flag = dcs_custom_crisis_multiplier_flag  }
                #NOT, because this flags meaning is reversed
                NOT = { has_country_flag = dcs_not_negate_crisis_strength } 
            } 
        }
    }
    desc =  {
        text = dcs_menu.desc.no_vanilla_negation
        trigger = { 
            event_target:global_event_country = { 
                NOT = { has_country_flag = dcs_custom_crisis_multiplier_flag } 
                has_country_flag = dcs_not_negate_crisis_strength 
            } 
        }
    }
    desc =  {
        text = dcs_menu.desc_custom_modifier
        trigger = { 
            event_target:global_event_country = { 
                has_country_flag = dcs_custom_crisis_multiplier_flag 
                #NOT, because this flags meaning is reversed
                NOT = { has_country_flag = dcs_not_negate_crisis_strength }
            } 
        }
    }
    desc =  {
        text = dcs_menu.desc_custom_modifier.no_vanilla_negation
        trigger = { 
            event_target:global_event_country = { 
                has_country_flag = dcs_custom_crisis_multiplier_flag 
                has_country_flag = dcs_not_negate_crisis_strength
            } 
        }
    }

    picture = GFX_evt_fleet_evil

    immediate = {
        event_target:global_event_country = {
            if = {
                limit = { not = { is_variable_set = dcs_crisis_multiplier } }
                dcs_calculate_crisis_strength = yes
            }
            if = {
                limit = { not = { is_variable_set = dcs_custom_crisis_multiplier } }
                set_variable = { which = dcs_custom_crisis_multiplier value = 1 }
            }
            if = {
                limit = { not = { is_variable_set = dcs_calculation_multiplier } }
                set_variable = { which = dcs_calculation_multiplier value = 1 }
            }
            if = {
                limit = { not = { is_variable_set = dcs_detected_vanilla_crisis } }
                set_variable = { which = dcs_detected_vanilla_crisis value = 0 }
            }
            if = {
                limit = { not = { is_variable_set = dcs_detected_vanilla_crisis_in_calculation } }
                set_variable = { which = dcs_detected_vanilla_crisis_in_calculation value = dcs_detected_vanilla_crisis }
            }
            if = {
                limit = { not = { is_variable_set = dcs_static_offset } }
                set_variable = { which = dcs_static_offset value = 0 }
            }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { not = { has_country_flag = dcs_not_negate_crisis_strength } } }
        name = dcs_menu.dcs_not_negate_crisis_strength_disable
        hidden_effect = {
            event_target:global_event_country = { 
                set_country_flag = dcs_not_negate_crisis_strength 
                set_variable = { which = dcs_detected_vanilla_crisis_in_calculation value = 0 }
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { has_country_flag = dcs_not_negate_crisis_strength } }
        name = dcs_menu.dcs_not_negate_crisis_strength_enable
        hidden_effect = {
            event_target:global_event_country = { 
                remove_country_flag = dcs_not_negate_crisis_strength 
                set_variable = { which = dcs_detected_vanilla_crisis_in_calculation value = dcs_detected_vanilla_crisis }
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { not = { has_country_flag = dcs_custom_crisis_multiplier_flag } } }
        name = dcs_menu.enable_custom_modifier
        hidden_effect = {
            event_target:global_event_country = { set_country_flag = dcs_custom_crisis_multiplier_flag }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { has_country_flag = dcs_custom_crisis_multiplier_flag } }
        name = dcs_menu.disable_custom_modifier
        hidden_effect = {
            event_target:global_event_country = { remove_country_flag = dcs_custom_crisis_multiplier_flag }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { not = { has_country_flag = dcs_custom_crisis_multiplier_flag } } }
        name = dcs_menu.increase_calculation_multiplier_5
        custom_tooltip = dcs_menu.increase_calculation_multiplier.tooltip
        hidden_effect = {
            event_target:global_event_country = { 
                change_variable = { which = dcs_calculation_multiplier value = 0.5 }
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { not = { has_country_flag = dcs_custom_crisis_multiplier_flag } } }
        name = dcs_menu.increase_calculation_multiplier
        custom_tooltip = dcs_menu.increase_calculation_multiplier.tooltip
        hidden_effect = {
            event_target:global_event_country = { 
                change_variable = { which = dcs_calculation_multiplier value = 0.1 }
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { not = { has_country_flag = dcs_custom_crisis_multiplier_flag } } }
        name = dcs_menu.decrease_calculation_multiplier
        custom_tooltip = dcs_menu.decrease_calculation_multiplier.tooltip
        hidden_effect = {
            event_target:global_event_country = { 
                subtract_variable = { which = dcs_calculation_multiplier value = 0.1 }
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { not = { has_country_flag = dcs_custom_crisis_multiplier_flag } } }
        name = dcs_menu.decrease_calculation_multiplier_5
        custom_tooltip = dcs_menu.decrease_calculation_multiplier.tooltip
        hidden_effect = {
            event_target:global_event_country = { 
                subtract_variable = { which = dcs_calculation_multiplier value = 0.5 }
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { not = { has_country_flag = dcs_custom_crisis_multiplier_flag } } }
        name = dcs_menu.increase_static_offset_1
        hidden_effect = {
            event_target:global_event_country = { 
                change_variable = { which = dcs_static_offset value = 1 }
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { not = { has_country_flag = dcs_custom_crisis_multiplier_flag } } }
        name = dcs_menu.decrease_static_offset_1
        hidden_effect = {
            event_target:global_event_country = { 
                subtract_variable = { which = dcs_static_offset value = 1 }
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { has_country_flag = dcs_custom_crisis_multiplier_flag } }
        name = dcs_menu.increase_custom_modifier_5
        hidden_effect = {
            event_target:global_event_country = { 
                change_variable = { which = dcs_custom_crisis_multiplier value = 5 } 
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

option = {
    trigger = { event_target:global_event_country = { has_country_flag = dcs_custom_crisis_multiplier_flag } }
    name = dcs_menu.increase_custom_modifier_0.1
    hidden_effect = {
        event_target:global_event_country = { 
            change_variable = { which = dcs_custom_crisis_multiplier value = 0.1 } 
        }
        every_country = {
            country_event = {
                id = dcs.101
            }
        }
        country_event = { id = dcs.400 }
    }
}

    option = {
    trigger = { event_target:global_event_country = { has_country_flag = dcs_custom_crisis_multiplier_flag } }
    name = dcs_menu.increase_custom_modifier_0.1
    hidden_effect = {
        event_target:global_event_country = { 
            change_variable = { which = dcs_custom_crisis_multiplier value = 0.1 } 
        }
        every_country = {
            country_event = {
                id = dcs.101
            }
        }
        country_event = { id = dcs.400 }
    }
}

    option = {
        trigger = { event_target:global_event_country = { has_country_flag = dcs_custom_crisis_multiplier_flag } }
        name = dcs_menu.decrease_custom_modifier_1
        hidden_effect = {
            event_target:global_event_country = { 
                subtract_variable = { which = dcs_custom_crisis_multiplier value = 1 } 
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { has_country_flag = dcs_custom_crisis_multiplier_flag } }
        name = dcs_menu.decrease_custom_modifier_1
        hidden_effect = {
            event_target:global_event_country = { 
                subtract_variable = { which = dcs_custom_crisis_multiplier value = 1 } 
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        trigger = { event_target:global_event_country = { has_country_flag = dcs_custom_crisis_multiplier_flag } }
        name = dcs_menu.decrease_custom_modifier_5
        hidden_effect = {
            event_target:global_event_country = { 
                subtract_variable = { which = dcs_custom_crisis_multiplier value = 5 } 
            }
            every_country = {
                country_event = {
                    id = dcs.101
                }
            }
            country_event = { id = dcs.400 }
        }
    }

    option = {
        name = dcs_menu.close
        default_hide_option = yes
    }
}