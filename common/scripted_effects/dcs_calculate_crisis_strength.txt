# Inputs:
# dcs_crisis_fleet_power_input = value used in crisis calculation. Lower means higher result. It's supposed to represent a crisises fleet power.
#                                Default is 180,000 for endgame crisis and 50,000 for midgame crisis.
dcs_calculate_crisis_strength = {
    if = {
        limit = { not = { is_variable_set = dcs_crisis_fleet_power_input } }
        set_variable = { which = dcs_crisis_fleet_power_input value = 180000 }
    }

    # find 5 strongest empires
    set_variable = { which = max_strength_1 value = -1 }
    set_variable = { which = max_strength_2 value = -1 }
    set_variable = { which = max_strength_3 value = -1 }
    set_variable = { which = max_strength_4 value = -1 }
    set_variable = { which = max_strength_5 value = -1 }

    every_playable_country = {
        export_trigger_value_to_variable = {
            trigger = fleet_power
            variable = strength
        }
        #log = "Empire: \\[This.GetName]"
        #log = "Fleet Strength: \\[This.strength]"
        if = {
            limit = { check_variable = { which = strength value > prev.max_strength_1 } }
            prev = { set_variable = { which = max_strength_1 value = prev.strength } }
            save_event_target_as = strongest_empire_1
        } else_if = {
            limit = { check_variable = { which = strength value > prev.max_strength_2 } }
            prev = { set_variable = { which = max_strength_2 value = prev.strength } }
            save_event_target_as = strongest_empire_2
        } else_if = {
            limit = { check_variable = { which = strength value > prev.max_strength_3 } }
            prev = { set_variable = { which = max_strength_3 value = prev.strength } }
            save_event_target_as = strongest_empire_3
        } else_if = {
            limit = { check_variable = { which = strength value > prev.max_strength_4 } }
            prev = { set_variable = { which = max_strength_4 value = prev.strength } }
            save_event_target_as = strongest_empire_4
        } else_if = {
            limit = { check_variable = { which = strength value > prev.max_strength_5 } }
            prev = { set_variable = { which = max_strength_5 value = prev.strength } }
            save_event_target_as = strongest_empire_5
        }
        clear_variable = strength
    }

    event_target:strongest_empire_1 = { log = "Strongest Empire: \\[This.GetName] with Fleet Power: \\[prev.max_strength_1]" }
    event_target:strongest_empire_2 = { log = "2nd Strongest Empire: \\[This.GetName] with Fleet Power: \\[prev.max_strength_2]" }
    event_target:strongest_empire_3 = { log = "3rd Strongest Empire: \\[This.GetName] with Fleet Power: \\[prev.max_strength_3]" }
    event_target:strongest_empire_4 = { log = "4th Strongest Empire: \\[This.GetName] with Fleet Power: \\[prev.max_strength_4]" }
    event_target:strongest_empire_5 = { log = "5th Strongest Empire: \\[This.GetName] with Fleet Power: \\[prev.max_strength_5]" }

	multiply_variable = { which = max_strength_1 value = 1 }
    multiply_variable = { which = max_strength_2 value = 0.8 }
    multiply_variable = { which = max_strength_3 value = 0.6 }
    multiply_variable = { which = max_strength_4 value = 0.4 }
    multiply_variable = { which = max_strength_5 value = 0.2 }

    set_variable = { which = dcs_universe_strength value = 0 }
    change_variable = { which = dcs_universe_strength value = max_strength_1 }
    change_variable = { which = dcs_universe_strength value = max_strength_2 }
    change_variable = { which = dcs_universe_strength value = max_strength_3 }
    change_variable = { which = dcs_universe_strength value = max_strength_4 }
    change_variable = { which = dcs_universe_strength value = max_strength_5 }

    divide_variable = { which = dcs_universe_strength value = 3 }
    log = "Weighted Average Universe Strength: \\[this.dcs_universe_strength]"


    # find 5 strongest player empires
    set_variable = { which = player_max_strength_1 value = -1 }
    set_variable = { which = player_max_strength_2 value = -1 }
    set_variable = { which = player_max_strength_3 value = -1 }
    set_variable = { which = player_max_strength_4 value = -1 }
    set_variable = { which = player_max_strength_5 value = -1 }

    every_playable_country = {
        limit = { is_ai = no }
        export_trigger_value_to_variable = {
            trigger = fleet_power
            variable = strength
        }
        #log = "Empire: \\[This.GetName]"
        #log = "Fleet Strength: \\[This.strength]"
        if = {
            limit = { check_variable = { which = strength value > prev.player_max_strength_1 } }
            prev = { set_variable = { which = player_max_strength_1 value = prev.strength } }
            save_event_target_as = strongest_player_1
        } else_if = {
            limit = { check_variable = { which = strength value > prev.player_max_strength_2 } }
            prev = { set_variable = { which = player_max_strength_2 value = prev.strength } }
            save_event_target_as = strongest_player_2
        } else_if = {
            limit = { check_variable = { which = strength value > prev.player_max_strength_3 } }
            prev = { set_variable = { which = player_max_strength_3 value = prev.strength } }
            save_event_target_as = strongest_player_3
        } else_if = {
            limit = { check_variable = { which = strength value > prev.player_max_strength_4 } }
            prev = { set_variable = { which = player_max_strength_4 value = prev.strength } }
            save_event_target_as = strongest_player_4
        } else_if = {
            limit = { check_variable = { which = strength value > prev.player_max_strength_5 } }
            prev = { set_variable = { which = player_max_strength_5 value = prev.strength } }
            save_event_target_as = strongest_player_5
        }
        clear_variable = strength
    }
    set_variable = { which = player_divisor value = 1 }
    if = { limit = { check_variable = { which = player_max_strength_1 value > -1 } }
        event_target:strongest_player_1 = { log = "Strongest Player: \\[This.GetName] with Fleet Power: \\[prev.player_max_strength_1]" }
    }
    if = { limit = { check_variable = { which = player_max_strength_2 value > -1 } } 
        change_variable = { which = player_divisor value = 0.8 }     
        event_target:strongest_player_2 = { log = "2. Strongest Player: \\[This.GetName] with Fleet Power: \\[prev.player_max_strength_2]" }
    }
    if = { limit = { check_variable = { which = player_max_strength_3 value > -1 } } 
        change_variable = { which = player_divisor value = 0.6 }     
        event_target:strongest_player_3 = { log = "3. Strongest Player: \\[This.GetName] with Fleet Power: \\[prev.player_max_strength_3]" }
    }
    if = { limit = { check_variable = { which = player_max_strength_4 value > -1 } } 
        change_variable = { which = player_divisor value = 0.4 }     
        event_target:strongest_player_4 = { log = "4. Strongest Player: \\[This.GetName] with Fleet Power: \\[prev.player_max_strength_4]" }
    }

    if = { limit = { check_variable = { which = player_max_strength_5 value > -1 } } 
        change_variable = { which = player_divisor value = 0.2 }     
        event_target:strongest_player_5 = { log = "5. Strongest Player: \\[This.GetName] with Fleet Power: \\[prev.player_max_strength_5]" }
    }

    multiply_variable = { which = player_max_strength_1 value = 1 }
    multiply_variable = { which = player_max_strength_2 value = 0.8 }
    multiply_variable = { which = player_max_strength_3 value = 0.6 }
    multiply_variable = { which = player_max_strength_4 value = 0.4 }
    multiply_variable = { which = player_max_strength_5 value = 0.2 }

    change_variable = { which = dcs_player_strength value = player_max_strength_1 }
    change_variable = { which = dcs_player_strength value = player_max_strength_2 }
    change_variable = { which = dcs_player_strength value = player_max_strength_3 }
    change_variable = { which = dcs_player_strength value = player_max_strength_4 }
    change_variable = { which = dcs_player_strength value = player_max_strength_5 }

    divide_variable = { which = dcs_player_strength value = player_divisor }
    log = "Weighted Average Player Strength: \\[this.dcs_player_strength]"

    change_variable = { which = dcs_universe_strength value = dcs_player_strength }
    divide_variable = { which = dcs_universe_strength value = 2 }
    round_variable = dcs_universe_strength
    log = "Adjusted Universe Strength with Player Strength: \\[this.dcs_universe_strength]"

    #calculate player strength
    set_variable = {
        which = dcs_crisis_multiplier
        value = this.dcs_universe_strength
    }

    divide_variable = { which = dcs_crisis_multiplier value = dcs_crisis_fleet_power_input }
    log = "Crisis Multiplier: \\[this.dcs_crisis_multiplier]"
    round_variable_to_closest = { which = dcs_crisis_multiplier value = 0.1 }
    log = "Crisis Multiplier: \\[this.dcs_crisis_multiplier]"
    if = {
        limit = { check_variable = { which = dcs_crisis_multiplier value < 0 } }
        set_variable = { which = dcs_crisis_multiplier value = 0 }
    }

    clear_variable = max_strength_1
    clear_variable = max_strength_2
    clear_variable = max_strength_3
    clear_variable = max_strength_4
    clear_variable = max_strength_5
    clear_variable = dcs_crisis_fleet_power_input
}

dcs_apply_crisis_strength = {
    #remove old modifier if it exists
    if = {
        limit = { has_modifier = dcs_crisis_strength_boost }
        remove_modifier = dcs_crisis_strength_boost
    }
    #prepare vanilla crisis strength negation or set to 0 if negation disabled
    if = {
        limit = { event_target:global_event_country = { has_dcs_negate_crisis_strength = yes } }
        set_variable = { which = dcs_subtract_vanilla_crisis value = dcs_detected_vanilla_crisis }
    } else = {
        set_variable = { which = dcs_subtract_vanilla_crisis value = 0 }
    }

    if = {
        #Custom modifier
        limit = { event_target:global_event_country = { has_country_flag = dcs_custom_crisis_multiplier_flag } }
        set_variable = { which = dcs_applied_multiplier value = event_target:global_event_country.dcs_custom_crisis_multiplier }
        #subtract determined vanilla crisis strength
        subtract_variable = { which = dcs_applied_multiplier value = dcs_subtract_vanilla_crisis }
        log = "Application of Custom Crisis Strength"
    } else = {
        set_variable = { which = dcs_applied_multiplier value = dcs_crisis_multiplier }
        multiply_variable = { which = dcs_applied_multiplier value = event_target:global_event_country.dcs_calculation_multiplier }
        #subtract determined vanilla crisis strength
        subtract_variable = { which = dcs_applied_multiplier value = dcs_subtract_vanilla_crisis }
        # add static offset
        change_variable = { which = dcs_applied_multiplier value = event_target:global_event_country.dcs_static_offset }
        log = "Application of Calculated Crisis Strength"
    }
    #ensure that applied multiplier is not negative. If the vanilla crisis setting is higher than the calculated,
    # we end up with the vanilla crisis strength.
    if = {
        limit = { 
            has_dcs_allow_negative_multiplier = no
            check_variable = { which = dcs_applied_multiplier value < 0 } 
        }
        set_variable = { which = dcs_applied_multiplier value = 0 }
    }
    if= {
        limit = { 
            has_dcs_affect_mid_game_crisis = no 
            is_midgame_crisis = yes
        }
        set_variable = { which = dcs_applied_multiplier value = 0 }
    }
    #apply new modifier
    add_modifier = { modifier = dcs_crisis_strength_boost days = -1 mult = dcs_applied_multiplier }
    #set equivalent vanilla crisis strength for printing in event dialog
    set_variable = { which = dcs_equivalent_vanilla_crisis value = dcs_applied_multiplier }
    change_variable = { which = dcs_equivalent_vanilla_crisis value = dcs_detected_vanilla_crisis }
    round_variable_to_closest = { which = dcs_equivalent_vanilla_crisis value = 0.1 }
    round_variable_to_closest = { which = dcs_applied_multiplier value = 0.1 }
    round_variable_to_closest = { which = dcs_subtract_vanilla_crisis value = 0.1 }
    log = "Applied Crisis Strength Multiplier: \\[this.dcs_applied_multiplier] to empire \\[this.GetName]"
}

#FROM = other crisis empire from which we can copy variables
dcs_copy_variables_from = {
    $FROM$ = { save_event_target_as = FROM }
    log = "Copying Varibales From: \\[event_target:FROM.GetName]"
    #get vanilla crisis strength negation from head crisis
    set_variable = { which = dcs_detected_vanilla_crisis value = event_target:FROM.dcs_detected_vanilla_crisis }
    set_variable = { which = dcs_crisis_multiplier value = event_target:FROM.dcs_crisis_multiplier }
}

dcs_ensure_global_initialization = {
    event_target:global_event_country = {
        if = {
            limit = { not = { is_variable_set = dcs_custom_crisis_multiplier } }
            set_variable = { which = dcs_custom_crisis_multiplier value = 1 }
        }
        if = {
            limit = { not = { is_variable_set = dcs_calculation_multiplier } }
            set_variable = { which = dcs_calculation_multiplier value = 1 }
        }
        if = {
            limit = { not = { is_variable_set = dcs_detected_vanilla_crisis } }
            set_variable = { which = dcs_detected_vanilla_crisis value = 0 }
        }
        if = {
            limit = { not = { is_variable_set = dcs_detected_vanilla_crisis_in_calculation } }
            set_variable = { which = dcs_detected_vanilla_crisis_in_calculation value = dcs_detected_vanilla_crisis }
        }
        if = {
            limit = { not = { is_variable_set = dcs_static_offset } }
            set_variable = { which = dcs_static_offset value = 0 }
        }
    }
}

dcs_detect_vanilla_crisis_strength = {
    #calculate vanilla crisis strength through modifier extraction
    if = {
        limit = {
            not = { is_variable_set = dcs_detected_vanilla_crisis }
        }
        #determine current modifier strength
        export_modifier_to_variable = {
            variable = dcs_damage_readout
            modifier = ship_weapon_damage
        }
        export_modifier_to_variable = {
            variable = dcs_hull_readout
            modifier = ship_hull_mult
        }
        export_modifier_to_variable = {
            variable = dcs_armor_readout
            modifier = ship_armor_mult
        }
        export_modifier_to_variable = {
            variable = dcs_shield_readout
            modifier = ship_shield_mult
        }
        log = "Current Ship Weapon Damage Modifier: \\[this.dcs_damage_readout]"
        log = "Current Ship Hull Modifier: \\[this.dcs_hull_readout]"
        log = "Current Ship Armor Modifier: \\[this.dcs_armor_readout]"
        log = "Current Ship Shield Modifier: \\[this.dcs_shield_readout]"
        #set lowest value as negation strength. Some values might have buffs from other sources, hopefully not all.
        set_variable = { which = dcs_detected_vanilla_crisis value = dcs_damage_readout} 
        if = {
            limit = { check_variable = { which = dcs_hull_readout value < dcs_detected_vanilla_crisis } }
            set_variable = { which = dcs_detected_vanilla_crisis value = dcs_hull_readout } 
        }
        if = {
            limit = { check_variable = { which = dcs_armor_readout value < dcs_detected_vanilla_crisis } }
            set_variable = { which = dcs_detected_vanilla_crisis value = dcs_armor_readout } 
        }
        if = {
            limit = { check_variable = { which = dcs_shield_readout value < dcs_detected_vanilla_crisis } }
            set_variable = { which = dcs_detected_vanilla_crisis value = dcs_shield_readout } 
        }
        #log current modifier strength
        log = "Set Negation Strength to: \\[this.dcs_detected_vanilla_crisis]"
        clear_variable = dcs_damage_readout
        clear_variable = dcs_hull_readout
        clear_variable = dcs_armor_readout
        clear_variable = dcs_shield_readout
    }
}